name: Test Matrix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: '1.6.1'
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=pytest-${{ matrix.os }}-${{ matrix.python-version }}.xml \
          -v \
          -m "unit"
      env:
        DB_PASSWORD: test_password

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          pytest-${{ matrix.os }}-${{ matrix.python-version }}.xml
          coverage.xml

  # Test with different dependency versions
  dependency-matrix:
    name: Test with ${{ matrix.dependency-set }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dependency-set:
          - "latest"   # Latest versions
          - "dev"      # Development/pre-release versions

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: '1.6.1'
        virtualenvs-create: true
        virtualenvs-in-project: true


    - name: Install latest dependencies
      if: matrix.dependency-set == 'latest'
      run: |
        poetry update
        poetry install --no-interaction

    - name: Install dev dependencies
      if: matrix.dependency-set == 'dev'
      run: |
        # Install pre-release versions
        poetry add --allow-prereleases asyncpg
        poetry add --allow-prereleases pydantic
        poetry install --no-interaction

    - name: Run tests
      run: |
        poetry run pytest tests/unit/ \
          --junitxml=pytest-${{ matrix.dependency-set }}.xml \
          -v \
          -m "unit"
      env:
        DB_PASSWORD: test_password

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-test-results-${{ matrix.dependency-set }}
        path: pytest-${{ matrix.dependency-set }}.xml


  # Generate test report
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test-matrix, dependency-matrix]
    if: always()

    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4

    - name: Generate combined test report
      run: |
        echo "# Test Matrix Results" > test-report.md
        echo "" >> test-report.md
        echo "## Summary" >> test-report.md
        echo "- **Test Matrix**: ${{ needs.test-matrix.result }}" >> test-report.md
        echo "- **Dependency Matrix**: ${{ needs.dependency-matrix.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Details" >> test-report.md
        echo "This workflow tested the application across multiple:" >> test-report.md
        echo "- Operating systems (Ubuntu, macOS)" >> test-report.md
        echo "- Python versions (3.11, 3.12)" >> test-report.md
        echo "- Dependency versions (latest, dev)" >> test-report.md

    - name: Upload combined test report
      uses: actions/upload-artifact@v4
      with:
        name: combined-test-report
        path: test-report.md

    - name: Comment test results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('test-report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });