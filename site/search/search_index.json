{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyBMP - BGP Monitoring Protocol Collector","text":"<p>Welcome to PyBMP, a high-performance Python-based BGP Monitoring Protocol (BMP) collector that provides real-time BGP route monitoring and historical analysis capabilities.</p>"},{"location":"#overview","title":"Overview","text":"<p>PyBMP is designed to collect, store, and analyze BGP routing information from network routers using the BMP protocol. It provides network operators with deep insights into BGP routing behavior, route changes, and network topology evolution over time.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#protocol-support","title":"\ud83d\ude80 Protocol Support","text":"<ul> <li>Full BMP v3 Implementation - Complete support for BGP Monitoring Protocol version 3</li> <li>Multi-Router Support - Handle connections from multiple routers simultaneously</li> <li>BGP Family Support - IPv4 unicast, IPv6 unicast, and EVPN routes</li> <li>Real-time Processing - Process and store routing updates as they arrive</li> </ul>"},{"location":"#data-storage-analytics","title":"\ud83d\uddc4\ufe0f Data Storage &amp; Analytics","text":"<ul> <li>TimescaleDB Integration - Efficient time-series storage optimized for routing data</li> <li>Route History Tracking - Track route announcements, withdrawals, and changes over time</li> <li>Automated Data Retention - Configurable retention policies (default: 90 days)</li> <li>Continuous Aggregates - Pre-computed hourly statistics for fast querying</li> </ul>"},{"location":"#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":"<ul> <li>Session Management - Monitor router sessions and connection status</li> <li>Prometheus Metrics - Built-in metrics endpoint for monitoring and alerting</li> <li>Structured Logging - Comprehensive logging with configurable levels</li> <li>Health Checks - Container health monitoring and status reporting</li> </ul>"},{"location":"#security-features","title":"\ud83d\udd12 Security Features","text":"<ul> <li>Buffer Overflow Protection - 10MB per connection limit</li> <li>Message Size Validation - 1MB maximum message size limit</li> <li>Connection Limits - Configurable maximum connections per IP</li> <li>Input Validation - Comprehensive BGP data validation</li> <li>SQL Injection Prevention - Parameterized queries only</li> <li>Rate Limiting - Token bucket algorithm for message throttling</li> </ul>"},{"location":"#deployment-ready","title":"\ud83d\udc33 Deployment Ready","text":"<ul> <li>Docker Support - Complete Docker and Docker Compose setup</li> <li>Container Registry - Pre-built images available on GitHub Container Registry</li> <li>Environment Configuration - Flexible configuration via environment variables</li> <li>Health Monitoring - Built-in health check endpoints</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>PyBMP follows a modern, scalable architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   BGP Routers   \u2502\u2500\u2500\u2500\u2500\u2502   PyBMP Server  \u2502\u2500\u2500\u2500\u2500\u2502   TimescaleDB   \u2502\n\u2502                 \u2502BMP \u2502                 \u2502    \u2502                 \u2502\n\u2502 Router 1, 2, 3  \u2502    \u2502 - Message Parse \u2502    \u2502 - Route Storage \u2502\n\u2502                 \u2502    \u2502 - Validation    \u2502    \u2502 - Time-series   \u2502\n\u2502                 \u2502    \u2502 - Rate Limiting \u2502    \u2502 - Aggregates    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u2502\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502   Prometheus    \u2502\n                       \u2502    Metrics      \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#supported-route-types","title":"Supported Route Types","text":""},{"location":"#ipv4-ipv6-unicast","title":"IPv4 &amp; IPv6 Unicast","text":"<ul> <li>Standard BGP routing table entries</li> <li>Next-hop information</li> <li>AS path analysis</li> <li>Community tracking</li> </ul>"},{"location":"#evpn-ethernet-vpn","title":"EVPN (Ethernet VPN)","text":"<ul> <li>Type 1: Ethernet Auto-Discovery (AD) routes</li> <li>Type 2: MAC/IP Advertisement routes</li> <li>Type 3: Inclusive Multicast Ethernet Tag routes</li> <li>Type 4: Ethernet Segment routes</li> <li>Type 5: IP Prefix routes</li> </ul> <p>Each EVPN route includes: - Route Distinguisher (RD) - Ethernet Segment Identifier (ESI) - Ethernet Tag ID - MAC addresses - MPLS labels</p>"},{"location":"#data-model","title":"Data Model","text":"<p>PyBMP stores comprehensive routing information including:</p> <ul> <li>Route Information: Prefix, next-hop, AS path, communities</li> <li>Temporal Data: Announcement/withdrawal timestamps, route lifetime</li> <li>Router Context: Source router, peer information, session details</li> <li>EVPN Specifics: ESI, MAC addresses, MPLS labels, route types</li> <li>Metadata: Raw BMP messages, processing timestamps</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#network-operations","title":"Network Operations","text":"<ul> <li>Route Leak Detection - Identify unauthorized route announcements</li> <li>Convergence Analysis - Measure BGP convergence times</li> <li>Topology Discovery - Map network topology changes over time</li> <li>Capacity Planning - Analyze routing table growth trends</li> </ul>"},{"location":"#security-monitoring","title":"Security Monitoring","text":"<ul> <li>Hijack Detection - Detect route hijacking attempts</li> <li>Anomaly Analysis - Identify unusual routing patterns</li> <li>Compliance Monitoring - Ensure routing policies are followed</li> </ul>"},{"location":"#performance-analysis","title":"Performance Analysis","text":"<ul> <li>Route Churn Analysis - Identify unstable routes</li> <li>Path Analysis - Study AS path changes over time</li> <li>Load Distribution - Monitor traffic distribution patterns</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to start monitoring your BGP infrastructure? Check out our Installation &amp; Configuration guide to get PyBMP up and running in your environment.</p> <p>For specific monitoring use cases, see our Useful Queries section for ready-to-use SQL queries.</p> <p>Security Notice</p> <p>PyBMP is a network-facing application. Always review our security guidelines and ensure proper network security measures are in place before production deployment.</p>"},{"location":"installation/","title":"Installation &amp; Configuration","text":"<p>This guide walks you through installing and configuring PyBMP for various deployment scenarios.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose (recommended)</li> <li>Python 3.11+ (for manual installation)</li> <li>PostgreSQL 15+ with TimescaleDB extension (for external database)</li> <li>Network access on port 11019 for BMP traffic</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#method-1-docker-compose-recommended","title":"Method 1: Docker Compose (Recommended)","text":"<p>The easiest way to get started with PyBMP including TimescaleDB and optional Grafana dashboard.</p>"},{"location":"installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/DigitalVortexLLC/pybmp.git\ncd pybmp\n</code></pre>"},{"location":"installation/#step-2-configure-environment","title":"Step 2: Configure Environment","text":"<pre><code># Copy the example environment file\ncp .env.example .env\n\n# Edit the configuration (IMPORTANT: Set a strong DB password)\nnano .env\n</code></pre> <p>Critical Configuration: <pre><code># Database Configuration\nDB_PASSWORD=your_very_strong_password_here\n\n# BMP Server Configuration\nBMP_LISTEN_PORT=11019  # Default BMP port\n\n# Data Retention\nDATA_RETENTION_DAYS=90\n\n# Logging\nLOG_LEVEL=INFO\n</code></pre></p>"},{"location":"installation/#step-3-start-services","title":"Step 3: Start Services","text":"<pre><code># Start all services (PyBMP, TimescaleDB, Grafana)\ndocker-compose up -d\n\n# Check service status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f bmp-collector\n</code></pre>"},{"location":"installation/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<pre><code># Check if BMP server is listening\nnetstat -tulpn | grep 11019\n\n# Check database connectivity\ndocker exec -it bmp-timescaledb psql -U bmp_user -d bmp_collector -c \"SELECT version();\"\n\n# Check Prometheus metrics\ncurl http://localhost:9090/metrics\n</code></pre>"},{"location":"installation/#method-2-pre-built-docker-image","title":"Method 2: Pre-built Docker Image","text":"<p>Use the pre-built image from GitHub Container Registry with your existing PostgreSQL database.</p>"},{"location":"installation/#pull-the-image","title":"Pull the Image","text":"<pre><code>docker pull ghcr.io/digitalvortexllc/pybmp:latest\n</code></pre>"},{"location":"installation/#run-with-external-database","title":"Run with External Database","text":"<pre><code>docker run -d \\\n  --name bmp-collector \\\n  -p 11019:11019 \\\n  -p 9090:9090 \\\n  -e DB_HOST=your-postgres-host \\\n  -e DB_PORT=5432 \\\n  -e DB_NAME=bmp_collector \\\n  -e DB_USER=bmp_user \\\n  -e DB_PASSWORD=your-secure-password \\\n  -e BMP_LISTEN_HOST=0.0.0.0 \\\n  -e BMP_LISTEN_PORT=11019 \\\n  -e LOG_LEVEL=INFO \\\n  -v /path/to/logs:/app/logs \\\n  ghcr.io/digitalvortexllc/pybmp:latest\n</code></pre>"},{"location":"installation/#method-3-manual-installation","title":"Method 3: Manual Installation","text":"<p>For development or custom deployment scenarios.</p>"},{"location":"installation/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<pre><code># Install Poetry (if not already installed)\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install project dependencies\npoetry install\n\n# Or using pip\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#step-2-database-setup","title":"Step 2: Database Setup","text":"<pre><code># Create database and user\ncreatedb -h localhost -U postgres bmp_collector\ncreateuser -h localhost -U postgres bmp_user\n\n# Install TimescaleDB extension and schema\npsql -h localhost -U postgres -d bmp_collector -f schema.sql\n</code></pre>"},{"location":"installation/#step-3-configuration","title":"Step 3: Configuration","text":"<pre><code># Create environment file\ncp .env.example .env\n\n# Edit configuration\nnano .env\n</code></pre>"},{"location":"installation/#step-4-run-the-application","title":"Step 4: Run the Application","text":"<pre><code># Using Poetry\npoetry run python main.py\n\n# Or directly\npython main.py\n</code></pre>"},{"location":"installation/#configuration-options","title":"Configuration Options","text":""},{"location":"installation/#environment-variables","title":"Environment Variables","text":"Variable Default Description Required <code>DB_HOST</code> localhost Database host \u2713 <code>DB_PORT</code> 5432 Database port \u2713 <code>DB_NAME</code> bmp_collector Database name \u2713 <code>DB_USER</code> bmp_user Database user \u2713 <code>DB_PASSWORD</code> - Database password \u2713 <code>BMP_LISTEN_HOST</code> 0.0.0.0 BMP server bind address - <code>BMP_LISTEN_PORT</code> 11019 BMP server port - <code>DATA_RETENTION_DAYS</code> 90 Data retention period - <code>LOG_LEVEL</code> INFO Log level (DEBUG, INFO, WARNING, ERROR) - <code>METRICS_PORT</code> 9090 Prometheus metrics port - <code>BMP_BUFFER_SIZE</code> 65536 Buffer size for BMP connections - <code>BMP_MAX_CONNECTIONS</code> 100 Maximum concurrent connections -"},{"location":"installation/#custom-port-configuration","title":"Custom Port Configuration","text":"<p>To run PyBMP on a custom port:</p> <pre><code># Method 1: Environment variable\nexport BMP_LISTEN_PORT=12345\n\n# Method 2: Docker\ndocker run -p 12345:12345 -e BMP_LISTEN_PORT=12345 ...\n\n# Method 3: Docker Compose\n# Edit docker-compose.yml:\nports:\n  - \"12345:12345\"\nenvironment:\n  BMP_LISTEN_PORT: 12345\n</code></pre>"},{"location":"installation/#external-postgresql-database","title":"External PostgreSQL Database","text":""},{"location":"installation/#database-requirements","title":"Database Requirements","text":"<ul> <li>PostgreSQL 15+ with TimescaleDB extension</li> <li>Minimum configuration:   <pre><code>-- postgresql.conf\nmax_connections = 200\nshared_preload_libraries = 'timescaledb'\n\n-- Memory settings (adjust based on available RAM)\nshared_buffers = 1GB\nwork_mem = 4MB\n</code></pre></li> </ul>"},{"location":"installation/#setup-steps","title":"Setup Steps","text":"<ol> <li> <p>Install TimescaleDB Extension: <pre><code>CREATE EXTENSION IF NOT EXISTS timescaledb;\n</code></pre></p> </li> <li> <p>Create Database and User: <pre><code>CREATE DATABASE bmp_collector;\nCREATE USER bmp_user WITH PASSWORD 'strong_password';\nGRANT ALL PRIVILEGES ON DATABASE bmp_collector TO bmp_user;\n</code></pre></p> </li> <li> <p>Load Schema: <pre><code>psql -h your-db-host -U bmp_user -d bmp_collector -f schema.sql\n</code></pre></p> </li> <li> <p>Configure PyBMP: <pre><code>DB_HOST=your-db-host\nDB_PORT=5432\nDB_NAME=bmp_collector\nDB_USER=bmp_user\nDB_PASSWORD=strong_password\n</code></pre></p> </li> </ol>"},{"location":"installation/#performance-tuning","title":"Performance Tuning","text":""},{"location":"installation/#database-optimization","title":"Database Optimization","text":"<pre><code>-- Adjust chunk interval for time partitioning (default: 7 days)\nSELECT set_chunk_time_interval('routes', INTERVAL '1 day');\n\n-- Add additional indexes for specific query patterns\nCREATE INDEX idx_routes_custom ON routes(router_ip, family) WHERE time &gt; NOW() - INTERVAL '7 days';\n\n-- Update statistics for query optimization\nANALYZE routes;\nANALYZE route_history;\n</code></pre>"},{"location":"installation/#application-tuning","title":"Application Tuning","text":"<pre><code># Increase buffer sizes for high-volume environments\nBMP_BUFFER_SIZE=131072\n\n# Adjust connection limits\nBMP_MAX_CONNECTIONS=200\n\n# Batch processing settings\nBATCH_SIZE=2000\nBATCH_TIMEOUT_SECONDS=3\nWORKER_THREADS=8\n</code></pre>"},{"location":"installation/#router-configuration","title":"Router Configuration","text":"<p>Configure your routers to send BMP data to PyBMP:</p>"},{"location":"installation/#cisco-ios-xr","title":"Cisco IOS-XR","text":"<pre><code>router bgp &lt;AS-NUMBER&gt;\n bmp server 1\n  host &lt;PYBMP-IP&gt; port 11019\n  description \"PyBMP Collector\"\n  update-source &lt;interface&gt;\n  flapping-delay 60\n  initial-delay 5\n  stats-reporting-period 60\n  route-monitoring pre-policy\n !\n!\n</code></pre>"},{"location":"installation/#juniper-junos","title":"Juniper JunOS","text":"<pre><code>routing-options {\n    bmp {\n        station pybmp-collector {\n            connection-mode active;\n            station-address &lt;PYBMP-IP&gt;;\n            station-port 11019;\n            routing-instance-id default;\n            local-address &lt;ROUTER-IP&gt;;\n            monitor enable;\n            route-monitoring {\n                none;\n                pre-policy;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"installation/#arista-eos","title":"Arista EOS","text":"<pre><code>router bgp &lt;AS-NUMBER&gt;\n bmp server &lt;PYBMP-IP&gt; port 11019\n bmp ribs pre-policy\n!\n</code></pre>"},{"location":"installation/#network-security","title":"Network Security","text":""},{"location":"installation/#firewall-configuration","title":"Firewall Configuration","text":"<p>Allow BMP traffic from your routers:</p> <pre><code># iptables example\niptables -A INPUT -p tcp --dport 11019 -s &lt;ROUTER-NETWORK&gt;/24 -j ACCEPT\niptables -A INPUT -p tcp --dport 9090 -s &lt;MONITORING-NETWORK&gt;/24 -j ACCEPT\n\n# ufw example\nufw allow from &lt;ROUTER-IP&gt; to any port 11019\nufw allow from &lt;MONITORING-IP&gt; to any port 9090\n</code></pre>"},{"location":"installation/#tlsssl-considerations","title":"TLS/SSL Considerations","text":"<p>For production deployments, consider:</p> <ul> <li>Running PyBMP behind a TLS-terminating proxy</li> <li>Using VPN or dedicated network connections</li> <li>Implementing network segmentation</li> </ul>"},{"location":"installation/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"installation/#prometheus-configuration","title":"Prometheus Configuration","text":"<p>Add to your <code>prometheus.yml</code>:</p> <pre><code>scrape_configs:\n  - job_name: 'pybmp'\n    static_configs:\n      - targets: ['&lt;PYBMP-HOST&gt;:9090']\n    scrape_interval: 30s\n    metrics_path: '/metrics'\n</code></pre>"},{"location":"installation/#grafana-dashboard","title":"Grafana Dashboard","text":"<ol> <li>Add TimescaleDB Data Source:</li> <li>URL: <code>postgresql://bmp_user:password@timescaledb:5432/bmp_collector</code></li> <li> <p>SSL Mode: disable (for local deployments)</p> </li> <li> <p>Import Dashboard:</p> </li> <li>Use the included Grafana dashboard configuration</li> <li>Customize panels based on your monitoring needs</li> </ol>"},{"location":"installation/#health-checks","title":"Health Checks","text":"<p>Monitor PyBMP health:</p> <pre><code># Container health check\ndocker exec bmp-collector python -c \"import src.bmp.server; print('OK')\"\n\n# Database connectivity\ndocker exec bmp-collector python -c \"\nfrom src.database.connection import DatabasePool\nfrom src.utils.config import get_settings\nimport asyncio\n\nasync def test():\n    settings = get_settings()\n    pool = DatabasePool(settings)\n    await pool.connect()\n    print('Database: OK')\n    await pool.disconnect()\n\nasyncio.run(test())\n\"\n\n# Metrics endpoint\ncurl -f http://localhost:9090/metrics &gt; /dev/null &amp;&amp; echo \"Metrics: OK\"\n</code></pre>"},{"location":"installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Port Already in Use: <pre><code># Find process using port 11019\nlsof -i :11019\n# Kill process or change port\n</code></pre></p> </li> <li> <p>Database Connection Failed: <pre><code># Test database connectivity\ndocker exec -it bmp-timescaledb psql -U bmp_user -d bmp_collector\n</code></pre></p> </li> <li> <p>Permission Denied: <pre><code># Fix log directory permissions\nmkdir -p logs\nchmod 755 logs\n</code></pre></p> </li> <li> <p>Memory Issues: <pre><code># Check available memory\nfree -h\n# Adjust Docker memory limits or database settings\n</code></pre></p> </li> </ol> <p>For more troubleshooting information, see the Logging &amp; Troubleshooting section.</p>"},{"location":"queries/","title":"Useful Queries","text":"<p>This section provides ready-to-use SQL queries for common BGP monitoring and analysis tasks. All queries are designed to work with TimescaleDB and take advantage of the hypertable structure for optimal performance.</p>"},{"location":"queries/#route-analysis-queries","title":"Route Analysis Queries","text":""},{"location":"queries/#routes-with-high-churn-most-unstable-routes","title":"Routes with High Churn (Most Unstable Routes)","text":"<p>Identify routes that change frequently, indicating potential instability:</p> <pre><code>SELECT\n    prefix,\n    router_ip,\n    peer_ip,\n    times_changed,\n    total_announcements,\n    total_withdrawals,\n    last_updated,\n    (total_announcements + total_withdrawals) as total_activity\nFROM route_history\nWHERE current_state = 'active'\n    AND times_changed &gt; 10\nORDER BY times_changed DESC, total_activity DESC\nLIMIT 50;\n</code></pre>"},{"location":"queries/#oldest-active-routes","title":"Oldest Active Routes","text":"<p>Find the longest-lived routes in the routing table:</p> <pre><code>SELECT\n    prefix,\n    router_ip,\n    peer_ip,\n    first_seen,\n    last_updated,\n    AGE(NOW(), first_seen) as route_age,\n    times_changed,\n    family\nFROM route_history\nWHERE current_state = 'active'\nORDER BY first_seen ASC\nLIMIT 50;\n</code></pre>"},{"location":"queries/#newest-routes-recent-announcements","title":"Newest Routes (Recent Announcements)","text":"<p>Identify recently announced routes:</p> <pre><code>SELECT\n    prefix,\n    router_ip,\n    peer_ip,\n    next_hop,\n    as_path,\n    first_seen,\n    family\nFROM route_history\nWHERE current_state = 'active'\n    AND first_seen &gt;= NOW() - INTERVAL '24 hours'\nORDER BY first_seen DESC\nLIMIT 100;\n</code></pre>"},{"location":"queries/#route-churn-over-time","title":"Route Churn Over Time","text":"<p>Analyze route instability trends over the past week:</p> <pre><code>SELECT\n    time_bucket('1 hour', time) as hour,\n    COUNT(*) as total_updates,\n    COUNT(DISTINCT prefix) as unique_prefixes,\n    SUM(CASE WHEN is_withdrawn THEN 1 ELSE 0 END) as withdrawals,\n    SUM(CASE WHEN NOT is_withdrawn THEN 1 ELSE 0 END) as announcements,\n    family\nFROM routes\nWHERE time &gt;= NOW() - INTERVAL '7 days'\nGROUP BY hour, family\nORDER BY hour DESC;\n</code></pre>"},{"location":"queries/#evpn-specific-queries","title":"EVPN Specific Queries","text":""},{"location":"queries/#find-mac-address-in-evpn-type-2-routes","title":"Find MAC Address in EVPN Type 2 Routes","text":"<p>Search for a specific MAC address across all EVPN Type 2 routes:</p> <pre><code>SELECT\n    prefix,\n    router_ip,\n    peer_ip,\n    mac_address,\n    ip_address,\n    route_distinguisher,\n    esi,\n    ethernet_tag_id,\n    mpls_label1,\n    mpls_label2,\n    time,\n    is_withdrawn\nFROM routes\nWHERE family = 'EVPN'\n    AND route_type = 'MAC/IP Advertisement'\n    AND mac_address = '00:50:56:9c:69:b6'  -- Replace with target MAC\nORDER BY time DESC;\n</code></pre>"},{"location":"queries/#evpn-route-types-distribution","title":"EVPN Route Types Distribution","text":"<p>Get an overview of EVPN route type distribution:</p> <pre><code>SELECT\n    route_type,\n    COUNT(*) as route_count,\n    COUNT(DISTINCT router_ip) as router_count,\n    COUNT(DISTINCT route_distinguisher) as rd_count\nFROM routes\nWHERE family = 'EVPN'\n    AND is_withdrawn = false\n    AND time &gt;= NOW() - INTERVAL '24 hours'\nGROUP BY route_type\nORDER BY route_count DESC;\n</code></pre>"},{"location":"queries/#evpn-esi-ethernet-segment-analysis","title":"EVPN ESI (Ethernet Segment) Analysis","text":"<p>Analyze Ethernet Segment activity:</p> <pre><code>SELECT\n    esi,\n    route_distinguisher,\n    COUNT(*) as route_count,\n    COUNT(DISTINCT mac_address) as unique_macs,\n    COUNT(DISTINCT ip_address) as unique_ips,\n    MIN(time) as first_seen,\n    MAX(time) as last_seen\nFROM routes\nWHERE family = 'EVPN'\n    AND esi IS NOT NULL\n    AND esi != '00:00:00:00:00:00:00:00:00:00'\n    AND is_withdrawn = false\nGROUP BY esi, route_distinguisher\nORDER BY route_count DESC;\n</code></pre>"},{"location":"queries/#router-and-peer-analysis","title":"Router and Peer Analysis","text":""},{"location":"queries/#active-router-sessions","title":"Active Router Sessions","text":"<p>Monitor currently active router sessions:</p> <pre><code>SELECT\n    router_ip,\n    router_name,\n    session_start,\n    AGE(NOW(), session_start) as session_duration,\n    peer_as,\n    peer_bgp_id,\n    total_messages,\n    status\nFROM router_sessions\nWHERE status = 'active'\nORDER BY session_start ASC;\n</code></pre>"},{"location":"queries/#peer-statistics-last-24-hours","title":"Peer Statistics (Last 24 Hours)","text":"<p>Analyze peer activity and message counts:</p> <pre><code>SELECT\n    router_ip,\n    peer_ip,\n    peer_as,\n    COUNT(*) as total_updates,\n    COUNT(DISTINCT prefix) as unique_prefixes,\n    SUM(CASE WHEN is_withdrawn THEN 1 ELSE 0 END) as withdrawals,\n    SUM(CASE WHEN NOT is_withdrawn THEN 1 ELSE 0 END) as announcements,\n    family\nFROM routes\nWHERE time &gt;= NOW() - INTERVAL '24 hours'\nGROUP BY router_ip, peer_ip, peer_as, family\nORDER BY total_updates DESC;\n</code></pre>"},{"location":"queries/#router-message-volume","title":"Router Message Volume","text":"<p>Monitor message processing volume per router:</p> <pre><code>SELECT\n    router_ip,\n    COUNT(*) as total_messages,\n    COUNT(CASE WHEN family = 'IPv4' THEN 1 END) as ipv4_messages,\n    COUNT(CASE WHEN family = 'IPv6' THEN 1 END) as ipv6_messages,\n    COUNT(CASE WHEN family = 'EVPN' THEN 1 END) as evpn_messages,\n    MIN(time) as first_message,\n    MAX(time) as last_message\nFROM routes\nWHERE time &gt;= NOW() - INTERVAL '24 hours'\nGROUP BY router_ip\nORDER BY total_messages DESC;\n</code></pre>"},{"location":"queries/#as-path-analysis","title":"AS Path Analysis","text":""},{"location":"queries/#most-common-as-paths","title":"Most Common AS Paths","text":"<p>Identify the most frequently seen AS paths:</p> <pre><code>SELECT\n    as_path,\n    COUNT(*) as occurrence_count,\n    COUNT(DISTINCT prefix) as unique_prefixes,\n    COUNT(DISTINCT router_ip) as router_count\nFROM routes\nWHERE time &gt;= NOW() - INTERVAL '24 hours'\n    AND is_withdrawn = false\n    AND as_path IS NOT NULL\nGROUP BY as_path\nORDER BY occurrence_count DESC\nLIMIT 50;\n</code></pre>"},{"location":"queries/#routes-by-origin-as","title":"Routes by Origin AS","text":"<p>Analyze routes by their origin AS (last AS in path):</p> <pre><code>SELECT\n    RIGHT(TRIM(as_path), POSITION(' ' IN REVERSE(TRIM(as_path) || ' ')) - 1) as origin_as,\n    COUNT(*) as route_count,\n    COUNT(DISTINCT prefix) as unique_prefixes\nFROM routes\nWHERE time &gt;= NOW() - INTERVAL '24 hours'\n    AND is_withdrawn = false\n    AND as_path IS NOT NULL\n    AND family = 'IPv4'\nGROUP BY origin_as\nORDER BY route_count DESC\nLIMIT 30;\n</code></pre>"},{"location":"queries/#prefix-analysis","title":"Prefix Analysis","text":""},{"location":"queries/#largest-prefixes-most-specific","title":"Largest Prefixes (Most Specific)","text":"<p>Find the most specific prefixes in the routing table:</p> <pre><code>SELECT\n    prefix,\n    prefix_len,\n    router_ip,\n    peer_ip,\n    next_hop,\n    as_path,\n    time,\n    family\nFROM routes\nWHERE is_withdrawn = false\n    AND time &gt;= NOW() - INTERVAL '24 hours'\nORDER BY prefix_len DESC, family, prefix\nLIMIT 100;\n</code></pre>"},{"location":"queries/#prefix-length-distribution","title":"Prefix Length Distribution","text":"<p>Analyze the distribution of prefix lengths:</p> <pre><code>SELECT\n    prefix_len,\n    family,\n    COUNT(*) as route_count,\n    COUNT(DISTINCT prefix) as unique_prefixes,\n    COUNT(DISTINCT router_ip) as router_count\nFROM routes\nWHERE is_withdrawn = false\n    AND time &gt;= NOW() - INTERVAL '24 hours'\nGROUP BY prefix_len, family\nORDER BY family, prefix_len;\n</code></pre>"},{"location":"queries/#performance-and-statistics","title":"Performance and Statistics","text":""},{"location":"queries/#hourly-route-statistics-pre-computed","title":"Hourly Route Statistics (Pre-computed)","text":"<p>Use the continuous aggregate for fast hourly statistics:</p> <pre><code>SELECT\n    hour,\n    router_ip,\n    peer_ip,\n    family,\n    total_updates,\n    unique_prefixes,\n    withdrawals,\n    announcements,\n    (announcements - withdrawals) as net_announcements\nFROM hourly_route_stats\nWHERE hour &gt;= NOW() - INTERVAL '7 days'\nORDER BY hour DESC, total_updates DESC;\n</code></pre>"},{"location":"queries/#database-size-and-growth","title":"Database Size and Growth","text":"<p>Monitor table sizes and growth:</p> <pre><code>SELECT\n    schemaname,\n    tablename,\n    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,\n    pg_total_relation_size(schemaname||'.'||tablename) as size_bytes\nFROM pg_tables\nWHERE schemaname = 'public'\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n</code></pre>"},{"location":"queries/#advanced-monitoring-queries","title":"Advanced Monitoring Queries","text":""},{"location":"queries/#route-leak-detection","title":"Route Leak Detection","text":"<p>Detect potential route leaks (routes with unusually long AS paths):</p> <pre><code>SELECT\n    prefix,\n    router_ip,\n    peer_ip,\n    as_path,\n    array_length(string_to_array(as_path, ' '), 1) as path_length,\n    time,\n    family\nFROM routes\nWHERE is_withdrawn = false\n    AND time &gt;= NOW() - INTERVAL '24 hours'\n    AND as_path IS NOT NULL\n    AND array_length(string_to_array(as_path, ' '), 1) &gt; 10  -- Adjust threshold\nORDER BY path_length DESC\nLIMIT 50;\n</code></pre>"},{"location":"queries/#rapid-route-changes-flapping-detection","title":"Rapid Route Changes (Flapping Detection)","text":"<p>Identify routes that are changing very frequently (potential flapping):</p> <pre><code>SELECT\n    prefix,\n    router_ip,\n    peer_ip,\n    COUNT(*) as changes_last_hour,\n    array_agg(DISTINCT is_withdrawn) as change_types,\n    MIN(time) as first_change,\n    MAX(time) as last_change\nFROM routes\nWHERE time &gt;= NOW() - INTERVAL '1 hour'\nGROUP BY prefix, router_ip, peer_ip\nHAVING COUNT(*) &gt; 5  -- More than 5 changes in an hour\nORDER BY changes_last_hour DESC;\n</code></pre>"},{"location":"queries/#next-hop-analysis","title":"Next-hop Analysis","text":"<p>Analyze next-hop diversity and changes:</p> <pre><code>SELECT\n    next_hop,\n    COUNT(*) as route_count,\n    COUNT(DISTINCT prefix) as unique_prefixes,\n    COUNT(DISTINCT router_ip) as router_count,\n    family\nFROM routes\nWHERE is_withdrawn = false\n    AND time &gt;= NOW() - INTERVAL '24 hours'\n    AND next_hop IS NOT NULL\nGROUP BY next_hop, family\nORDER BY route_count DESC\nLIMIT 50;\n</code></pre>"},{"location":"queries/#query-performance-tips","title":"Query Performance Tips","text":"<p>Performance Optimization</p> <ul> <li>Always include time constraints in your queries to leverage TimescaleDB's time-partitioning</li> <li>Use the <code>hourly_route_stats</code> materialized view for aggregated data analysis</li> <li>Add appropriate indexes for frequently queried columns</li> <li>Consider using <code>time_bucket()</code> for time-series aggregations</li> </ul> <p>Query Customization</p> <ul> <li>Replace time intervals (<code>INTERVAL '24 hours'</code>) with your desired timeframe</li> <li>Adjust thresholds and limits based on your network size and requirements</li> <li>Use specific router IPs or peer IPs to focus on particular network segments</li> </ul>"},{"location":"troubleshooting/","title":"Logging &amp; Troubleshooting","text":"<p>This guide helps you monitor PyBMP operations, understand log outputs, and troubleshoot common issues.</p>"},{"location":"troubleshooting/#log-configuration","title":"Log Configuration","text":""},{"location":"troubleshooting/#log-levels","title":"Log Levels","text":"<p>PyBMP supports multiple log levels for different verbosity:</p> Level Description Use Case <code>DEBUG</code> Very detailed information Development and deep debugging <code>INFO</code> General information about operation Normal production monitoring <code>WARNING</code> Warning messages about potential issues Production with enhanced monitoring <code>ERROR</code> Error conditions that don't stop operation Production (default) <code>CRITICAL</code> Critical errors that may stop operation Production alerts"},{"location":"troubleshooting/#setting-log-level","title":"Setting Log Level","text":"<pre><code># Environment variable\nexport LOG_LEVEL=DEBUG\n\n# Docker run\ndocker run -e LOG_LEVEL=DEBUG ...\n\n# Docker Compose\nenvironment:\n  LOG_LEVEL: DEBUG\n</code></pre>"},{"location":"troubleshooting/#log-format","title":"Log Format","text":"<p>PyBMP uses structured logging with the following format:</p> <pre><code>2024-01-15 10:30:45,123 - module_name - INFO - Message content\nTIMESTAMP - LOGGER_NAME - LEVEL - MESSAGE\n</code></pre>"},{"location":"troubleshooting/#log-sources","title":"Log Sources","text":""},{"location":"troubleshooting/#main-application-logs","title":"Main Application Logs","text":"<p>Monitor the main application container:</p> <pre><code># Docker Compose\ndocker-compose logs -f bmp-collector\n\n# Docker container\ndocker logs -f bmp-collector\n\n# Follow logs with timestamps\ndocker-compose logs -f -t bmp-collector\n</code></pre>"},{"location":"troubleshooting/#database-logs","title":"Database Logs","text":"<p>Monitor TimescaleDB operations:</p> <pre><code># Database container logs\ndocker-compose logs -f timescaledb\n\n# PostgreSQL logs inside container\ndocker exec -it bmp-timescaledb tail -f /var/log/postgresql/postgresql-15-main.log\n</code></pre>"},{"location":"troubleshooting/#understanding-log-messages","title":"Understanding Log Messages","text":""},{"location":"troubleshooting/#normal-operation-logs","title":"Normal Operation Logs","text":""},{"location":"troubleshooting/#startup-sequence","title":"Startup Sequence","text":"<pre><code>2024-01-15 10:30:45 - src.main - INFO - Starting BMP Collector...\n2024-01-15 10:30:45 - src.database.connection - INFO - Database connection established\n2024-01-15 10:30:46 - src.bmp.server - INFO - BMP server starting on 0.0.0.0:11019\n2024-01-15 10:30:46 - src.bmp.server - INFO - BMP server listening for connections\n</code></pre>"},{"location":"troubleshooting/#router-connection","title":"Router Connection","text":"<pre><code>2024-01-15 10:31:20 - src.bmp.server - INFO - New connection from 192.168.1.10:51234\n2024-01-15 10:31:21 - src.bmp.processor - INFO - Router 192.168.1.10 session started\n2024-01-15 10:31:21 - src.bmp.processor - INFO - Processing initiation message from 192.168.1.10\n</code></pre>"},{"location":"troubleshooting/#route-processing","title":"Route Processing","text":"<pre><code>2024-01-15 10:31:25 - src.bmp.processor - INFO - Processed 150 route updates from 192.168.1.10\n2024-01-15 10:31:30 - src.bmp.processor - DEBUG - Route announcement: 10.0.0.0/8 via 192.168.1.1\n2024-01-15 10:31:35 - src.bmp.processor - DEBUG - Route withdrawal: 172.16.0.0/12\n</code></pre>"},{"location":"troubleshooting/#warning-messages","title":"Warning Messages","text":""},{"location":"troubleshooting/#buffer-management","title":"Buffer Management","text":"<pre><code>2024-01-15 10:35:00 - src.bmp.server - WARNING - High buffer usage for connection 192.168.1.10 (85%)\n2024-01-15 10:35:30 - src.bmp.processor - WARNING - Batch processing delayed, queue size: 500\n</code></pre>"},{"location":"troubleshooting/#database-performance","title":"Database Performance","text":"<pre><code>2024-01-15 10:40:00 - src.database.connection - WARNING - Database query slow: 1.5s\n2024-01-15 10:40:15 - src.database.connection - WARNING - Connection pool near capacity: 18/20\n</code></pre>"},{"location":"troubleshooting/#error-messages","title":"Error Messages","text":""},{"location":"troubleshooting/#connection-issues","title":"Connection Issues","text":"<pre><code>2024-01-15 10:45:00 - src.bmp.server - ERROR - Connection lost from 192.168.1.10: [Errno 104] Connection reset by peer\n2024-01-15 10:45:10 - src.database.connection - ERROR - Database connection failed: connection timeout\n</code></pre>"},{"location":"troubleshooting/#data-processing-errors","title":"Data Processing Errors","text":"<pre><code>2024-01-15 10:50:00 - src.bmp.parser - ERROR - Invalid BMP message format from 192.168.1.10\n2024-01-15 10:50:05 - src.bmp.bgp_parser - ERROR - Malformed BGP update in BMP message\n</code></pre>"},{"location":"troubleshooting/#monitoring-with-prometheus-metrics","title":"Monitoring with Prometheus Metrics","text":""},{"location":"troubleshooting/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<p>Access metrics at <code>http://localhost:9090/metrics</code>:</p>"},{"location":"troubleshooting/#connection-metrics","title":"Connection Metrics","text":"<pre><code># Active connections\nbmp_active_connections{router_ip=\"192.168.1.10\"} 1\n\n# Total messages received\nbmp_messages_received_total{router_ip=\"192.168.1.10\",message_type=\"route_monitoring\"} 1500\n\n# Message processing rate\nbmp_message_processing_rate{router_ip=\"192.168.1.10\"} 25.5\n</code></pre>"},{"location":"troubleshooting/#database-metrics","title":"Database Metrics","text":"<pre><code># Database queries executed\ndatabase_queries_total{operation=\"insert\"} 5000\n\n# Database connection pool usage\ndatabase_pool_connections{state=\"active\"} 8\ndatabase_pool_connections{state=\"idle\"} 12\n\n# Query execution time\ndatabase_query_duration_seconds{operation=\"insert\",quantile=\"0.95\"} 0.05\n</code></pre>"},{"location":"troubleshooting/#system-metrics","title":"System Metrics","text":"<pre><code># Memory usage\nprocess_resident_memory_bytes 256000000\n\n# CPU usage\nprocess_cpu_seconds_total 120.5\n\n# File descriptors\nprocess_open_fds 45\n</code></pre>"},{"location":"troubleshooting/#setting-up-alerts","title":"Setting Up Alerts","text":"<p>Example Prometheus alerting rules:</p> <pre><code>groups:\n  - name: pybmp_alerts\n    rules:\n      - alert: BMPHighConnectionLoss\n        expr: rate(bmp_connections_lost_total[5m]) &gt; 0.1\n        for: 2m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High BMP connection loss rate\"\n          description: \"BMP connection loss rate is {{ $value }} connections/sec\"\n\n      - alert: BMPDatabaseSlow\n        expr: database_query_duration_seconds{quantile=\"0.95\"} &gt; 1.0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Database queries are slow\"\n          description: \"95th percentile query time is {{ $value }} seconds\"\n\n      - alert: BMPHighMemoryUsage\n        expr: process_resident_memory_bytes &gt; 1000000000\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High memory usage\"\n          description: \"PyBMP using {{ $value | humanize1024 }}B of memory\"\n</code></pre>"},{"location":"troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"troubleshooting/#1-router-connection-issues","title":"1. Router Connection Issues","text":""},{"location":"troubleshooting/#symptoms","title":"Symptoms","text":"<pre><code>ERROR - Connection lost from 192.168.1.10: [Errno 104] Connection reset by peer\nWARNING - No data received from 192.168.1.10 for 60 seconds\n</code></pre>"},{"location":"troubleshooting/#possible-causes-solutions","title":"Possible Causes &amp; Solutions","text":"<p>Network Connectivity: <pre><code># Test connectivity from PyBMP host to router\ntelnet 192.168.1.10 179  # BGP port should be open\nping 192.168.1.10\n\n# Check firewall rules\niptables -L -n | grep 11019\nufw status\n</code></pre></p> <p>Router Configuration: <pre><code># Verify router BMP configuration\n# Check if router can reach PyBMP\nshow ip route &lt;PYBMP-IP&gt;\nshow bmp summary\n</code></pre></p> <p>PyBMP Configuration: <pre><code># Check if PyBMP is listening on correct interface\nnetstat -tulpn | grep 11019\nss -tulpn | grep 11019\n\n# Verify container networking (if using Docker)\ndocker port bmp-collector\n</code></pre></p>"},{"location":"troubleshooting/#2-database-performance-issues","title":"2. Database Performance Issues","text":""},{"location":"troubleshooting/#symptoms_1","title":"Symptoms","text":"<pre><code>WARNING - Database query slow: 2.5s\nERROR - Database connection timeout\nWARNING - Connection pool near capacity: 20/20\n</code></pre>"},{"location":"troubleshooting/#solutions","title":"Solutions","text":"<p>Optimize Database: <pre><code>-- Update table statistics\nANALYZE routes;\nANALYZE route_history;\n\n-- Check for missing indexes\nSELECT schemaname, tablename, attname, n_distinct, correlation\nFROM pg_stats\nWHERE schemaname = 'public' AND tablename = 'routes';\n\n-- Add custom indexes for frequent queries\nCREATE INDEX CONCURRENTLY idx_routes_recent_by_router\nON routes(router_ip, time DESC)\nWHERE time &gt; NOW() - INTERVAL '7 days';\n</code></pre></p> <p>Tune Database Configuration: <pre><code>-- postgresql.conf\nmax_connections = 200\nshared_buffers = 2GB\nwork_mem = 8MB\neffective_cache_size = 8GB\ncheckpoint_timeout = 10min\nwal_buffers = 16MB\n</code></pre></p> <p>Adjust Connection Pool: <pre><code># Increase database pool size\nDB_POOL_SIZE=30\nDB_MAX_OVERFLOW=60\n\n# Adjust batch processing\nBATCH_SIZE=500\nBATCH_TIMEOUT_SECONDS=10\n</code></pre></p>"},{"location":"troubleshooting/#3-high-memory-usage","title":"3. High Memory Usage","text":""},{"location":"troubleshooting/#symptoms_2","title":"Symptoms","text":"<pre><code>WARNING - High memory usage detected: 1.2GB\nERROR - Out of memory: cannot allocate more connections\n</code></pre>"},{"location":"troubleshooting/#solutions_1","title":"Solutions","text":"<p>Monitor Memory Usage: <pre><code># Container memory usage\ndocker stats bmp-collector\n\n# Detailed memory breakdown\ndocker exec bmp-collector cat /proc/meminfo\ndocker exec bmp-collector ps aux --sort=-%mem\n</code></pre></p> <p>Optimize Configuration: <pre><code># Reduce buffer sizes\nBMP_BUFFER_SIZE=32768\nBMP_MAX_CONNECTIONS=50\n\n# Limit batch sizes\nBATCH_SIZE=500\nWORKER_THREADS=2\n</code></pre></p> <p>Database Memory: <pre><code>-- Check database cache hit ratio\nSELECT datname,\n       blks_read,\n       blks_hit,\n       round((blks_hit::float/(blks_read+blks_hit+1)*100)::numeric, 2) as cache_hit_ratio\nFROM pg_stat_database\nWHERE datname = 'bmp_collector';\n</code></pre></p>"},{"location":"troubleshooting/#4-message-processing-delays","title":"4. Message Processing Delays","text":""},{"location":"troubleshooting/#symptoms_3","title":"Symptoms","text":"<pre><code>WARNING - Batch processing delayed, queue size: 1000\nINFO - Processing lag: 30 seconds behind real-time\n</code></pre>"},{"location":"troubleshooting/#solutions_2","title":"Solutions","text":"<p>Increase Processing Capacity: <pre><code># More worker threads\nWORKER_THREADS=8\n\n# Larger batch sizes (if database can handle)\nBATCH_SIZE=2000\n\n# Shorter timeout for faster processing\nBATCH_TIMEOUT_SECONDS=2\n</code></pre></p> <p>Database Optimization: <pre><code>-- Partition old data\nSELECT drop_chunks('routes', INTERVAL '30 days');\n\n-- Update chunk interval for better performance\nSELECT set_chunk_time_interval('routes', INTERVAL '6 hours');\n</code></pre></p>"},{"location":"troubleshooting/#5-log-file-issues","title":"5. Log File Issues","text":""},{"location":"troubleshooting/#log-rotation","title":"Log Rotation","text":"<pre><code># Setup logrotate for Docker logs\ncat &gt; /etc/logrotate.d/docker-pybmp &lt;&lt; EOF\n/var/lib/docker/containers/*/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0644 root root\n    postrotate\n        docker kill --signal=USR1 $(docker ps -q)\n    endscript\n}\nEOF\n</code></pre>"},{"location":"troubleshooting/#disk-space-monitoring","title":"Disk Space Monitoring","text":"<pre><code># Monitor log directory size\ndu -sh /var/lib/docker/containers/*/\n\n# Clean old logs\ndocker system prune -f\ndocker container prune -f\n</code></pre>"},{"location":"troubleshooting/#debugging-tools","title":"Debugging Tools","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Temporarily enable debug logging\ndocker exec bmp-collector kill -USR1 1\n\n# Or restart with debug logging\ndocker-compose down\ndocker-compose up -d -e LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"troubleshooting/#database-query-analysis","title":"Database Query Analysis","text":"<pre><code>-- Show slow queries\nSELECT query, mean_time, calls, total_time\nFROM pg_stat_statements\nWHERE mean_time &gt; 100\nORDER BY mean_time DESC;\n\n-- Show current running queries\nSELECT pid, now() - pg_stat_activity.query_start AS duration, query\nFROM pg_stat_activity\nWHERE (now() - pg_stat_activity.query_start) &gt; interval '5 minutes';\n</code></pre>"},{"location":"troubleshooting/#network-packet-capture","title":"Network Packet Capture","text":"<pre><code># Capture BMP traffic for analysis\ntcpdump -i any -w bmp_capture.pcap port 11019\n\n# Analyze with tshark\ntshark -r bmp_capture.pcap -Y \"tcp.port == 11019\"\n</code></pre>"},{"location":"troubleshooting/#resource-monitoring","title":"Resource Monitoring","text":"<pre><code># Real-time monitoring\nwatch -n 1 'docker stats --no-stream bmp-collector'\n\n# Continuous monitoring with timestamps\nwhile true; do\n    echo \"$(date): $(docker stats --no-stream --format 'table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}' bmp-collector)\"\n    sleep 60\ndone\n</code></pre>"},{"location":"troubleshooting/#performance-tuning","title":"Performance Tuning","text":""},{"location":"troubleshooting/#application-tuning","title":"Application Tuning","text":"<pre><code># Optimize for high-volume environments\nBMP_BUFFER_SIZE=131072\nBMP_MAX_CONNECTIONS=200\nBATCH_SIZE=5000\nBATCH_TIMEOUT_SECONDS=1\nWORKER_THREADS=16\n</code></pre>"},{"location":"troubleshooting/#database-tuning","title":"Database Tuning","text":"<pre><code>-- Optimize for time-series workload\nSET maintenance_work_mem = '1GB';\nSET checkpoint_timeout = '15min';\nSET wal_compression = on;\nSET log_min_duration_statement = 1000;\n</code></pre>"},{"location":"troubleshooting/#container-resource-limits","title":"Container Resource Limits","text":"<pre><code># docker-compose.yml\nservices:\n  bmp-collector:\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n          cpus: '2.0'\n        reservations:\n          memory: 1G\n          cpus: '1.0'\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>When reporting issues, include:</p> <ol> <li>Log snippets with timestamps</li> <li>Configuration (sanitized)</li> <li>System information (OS, Docker version, hardware)</li> <li>Network topology and router models</li> <li>Metrics data if available</li> </ol> <pre><code># Generate diagnostic report\ndocker-compose logs --tail=100 &gt; pybmp-logs.txt\ndocker stats --no-stream &gt; pybmp-stats.txt\ncurl -s http://localhost:9090/metrics &gt; pybmp-metrics.txt\n</code></pre>"}]}